{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This guide is intended to be your guiding light in the dark dangerous cave of learning Git. Goals of this guide: Help you improve your git skills. No matter how much you already know about git, here you can find new things to learn. You know the basics of git / SCM but you also know that you don't know enough. This guide lays out the track from \"I know how to merge branches\" to git mastery. For every little facet and detail of using git there exists a blog post or StackOverflow question or both that explain that particular topic very well. Instead of re-writing everything this guide stays concise and links to the full explanations. Target audience You should fall into one of these categories: You're already a little familiar with Git . This guide is for you. To continue we assume you know everything listed in the next chapter. If you do not know something listed there, google the words that don't sound familiar to you. You're new to Git and/or Version Control Systems in general. In this case you're better off reading a book about Git and after that return to this guide. Here is an incomplete list of git books/guides: https://hackr.io/tutorials/learn-git Motivation I had a hard time learning Git. The first time I worked with Git, I wanted to get something done and git was an obstacle in my path to achieve a goal. I rushed the learning process. I got the basic commands down like add, commit, checkout, push etc. but then I stopped going deeper and I ended up in a pretty lost place. Learning git takes time . There are entire books about git that take you from the basics to the details. However, I wasn't patient enough to read those books. I already knew the basics so why would I read a book that teaches me the basics all over before it gets to the good parts? And if I skipped to the good parts what small details will I have missed that would be necessary to get a good understanding? Prerequisite knowledge of Git This guide will not cover any of the following topics. It assumes the reader knows these. Setting up a new repository git init What are commits and how to commit Terminology: commits, index/stage, working directory Commits are identified by a unique hash which can be referred to with as little as its first six characters Commands: status / add / commit / log What are branches and how to use them diff branch / checkout / merge Beyond a local repo on your computer clone / remote (s) push / fetch","title":"Introduction"},{"location":"#introduction","text":"This guide is intended to be your guiding light in the dark dangerous cave of learning Git. Goals of this guide: Help you improve your git skills. No matter how much you already know about git, here you can find new things to learn. You know the basics of git / SCM but you also know that you don't know enough. This guide lays out the track from \"I know how to merge branches\" to git mastery. For every little facet and detail of using git there exists a blog post or StackOverflow question or both that explain that particular topic very well. Instead of re-writing everything this guide stays concise and links to the full explanations.","title":"Introduction"},{"location":"#target-audience","text":"You should fall into one of these categories: You're already a little familiar with Git . This guide is for you. To continue we assume you know everything listed in the next chapter. If you do not know something listed there, google the words that don't sound familiar to you. You're new to Git and/or Version Control Systems in general. In this case you're better off reading a book about Git and after that return to this guide. Here is an incomplete list of git books/guides: https://hackr.io/tutorials/learn-git","title":"Target audience"},{"location":"#motivation","text":"I had a hard time learning Git. The first time I worked with Git, I wanted to get something done and git was an obstacle in my path to achieve a goal. I rushed the learning process. I got the basic commands down like add, commit, checkout, push etc. but then I stopped going deeper and I ended up in a pretty lost place. Learning git takes time . There are entire books about git that take you from the basics to the details. However, I wasn't patient enough to read those books. I already knew the basics so why would I read a book that teaches me the basics all over before it gets to the good parts? And if I skipped to the good parts what small details will I have missed that would be necessary to get a good understanding?","title":"Motivation"},{"location":"#prerequisite-knowledge-of-git","text":"This guide will not cover any of the following topics. It assumes the reader knows these. Setting up a new repository git init What are commits and how to commit Terminology: commits, index/stage, working directory Commits are identified by a unique hash which can be referred to with as little as its first six characters Commands: status / add / commit / log What are branches and how to use them diff branch / checkout / merge Beyond a local repo on your computer clone / remote (s) push / fetch","title":"Prerequisite knowledge of Git"},{"location":"guide/","text":"Becoming proficient with Git The Visual Git Reference (VGR) This is the mother of all informative resources about Git. Read it very carefully. A Git repository is a directed acyclic graph (DAG) of commits The commit DAG is frequently reported to be \"the most important thing to realize about git\". You should strive to understand every git command in terms of how it manipulates the commit graph! The VGR is an excellent resource to understand this. Have a look at the DAG of your repository with git log --all --decorate --oneline --graph (log adog / \"look, a dog!\" ) What you need to internalize is that commits are nodes in a DAG . All commits have one parent commit, merge commits have two parents. Another concept you need to understand are references. Branches, tags and HEAD are all references . Which basically means they are an alias of a particular commit. Examples: \" merge creates a commit with two parent commits\", \" cherry-pick takes a list of commit hashes and applies them as patches onto HEAD\" and \" reset takes a reference to or the hash of a commit and makes the current branch point to it\". HEAD is a special reference . Relative references , like HEAD~2 are very helpful too. Rebasing Rebasing is an alternative to merging in that both of them are ways to integrate two branches. A rebase is a special case of cherry-pick . cherry-pick Select commits by their hashes and apply them one-by-one onto HEAD See the VGR for visual aid. rebase Rebase does the same as cherry-pick, only for entire branches automatically. The VGR explains the technical side of rebases pretty well. This guide -- Getting solid at Git rebase vs. merge -- explains in depth and in length the ins and outs of rebase in contrast with merge. It's very lengthy and also goes into many details that will be covered later in this guide. You should probably skip this and revisit it later. push --force / push --force-with-lease After you rebased a branch it contains different commits than before. Because of that git push will reject your changes. A full explanation of the problem and why --force-with-lease is a better solution than --force can be found here . Working with remotes git fetch --all git pull --all will not pull all branches push --set-upstream git branch -vva How to pull correctly Before turning to pull , let's make clear what a fast-forward merge is. Fast-forward merges A fast-forward merge is the special case where a merge can be completed without creating an extra merge commit. See the VGR or https://sandofsky.com/images/fast_forward.pdf pull vs pull --rebase vs pull --ff-only What's the difference between pull and pull --rebase ? (spoiler: pull --rebase > pull ): When should I use git pull --rebase ? And another article discouraging pull : https://adamcod.es/2014/12/10/git-pull-correct-workflow.html pull is actually considered harmful! The preferred way to get remote changes is: Use ull --ff-only and if it fails consciously take appropriate actions with merge, rebase, cherry-pick, whatever. Read the answers to this SO question Workflow In order to have a broad understanding of Git let's have a look at a couple of popular usage paradigms A very basic introductory article on how to use branches in Git: https://sandofsky.com/blog/git-workflow.html The Git flow . A very popular branching model for git. Maximum historical innformation An overview of Git workflows Distributed Git Workflows Example of a centralized workflow: Gitlab's Merge Request workflow Example of a Integration-Manager Workflow: Fork and Pull Request Workflow (GitHub's Pull Request workflow) Example of a Dictator and Lieutenants Workflow: The Linux kernel's patch-based workflow On the importance of worrying about your commit history \"Keep a clean Git history\" they say How (and why!) to keep your Git commit history clean git rebase -i - Git Interactive Rebase, Squash, Amend and Other Ways of Rewriting History Undoing things in Git reset / commit --amend https://hackernoon.com/when-to-use-git-reset-git-revert-git-checkout-dc4824795d9 https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting squash / commit --fixup / rebase --auto-squash https://robots.thoughtbot.com/autosquashing-git-commits","title":"Becoming proficient with Git"},{"location":"guide/#becoming-proficient-with-git","text":"","title":"Becoming proficient with Git"},{"location":"guide/#the-visual-git-reference-vgr","text":"This is the mother of all informative resources about Git. Read it very carefully.","title":"The Visual Git Reference (VGR)"},{"location":"guide/#a-git-repository-is-a-directed-acyclic-graph-dag-of-commits","text":"The commit DAG is frequently reported to be \"the most important thing to realize about git\". You should strive to understand every git command in terms of how it manipulates the commit graph! The VGR is an excellent resource to understand this. Have a look at the DAG of your repository with git log --all --decorate --oneline --graph (log adog / \"look, a dog!\" ) What you need to internalize is that commits are nodes in a DAG . All commits have one parent commit, merge commits have two parents. Another concept you need to understand are references. Branches, tags and HEAD are all references . Which basically means they are an alias of a particular commit. Examples: \" merge creates a commit with two parent commits\", \" cherry-pick takes a list of commit hashes and applies them as patches onto HEAD\" and \" reset takes a reference to or the hash of a commit and makes the current branch point to it\". HEAD is a special reference . Relative references , like HEAD~2 are very helpful too.","title":"A Git repository is a directed acyclic graph (DAG) of commits"},{"location":"guide/#rebasing","text":"Rebasing is an alternative to merging in that both of them are ways to integrate two branches. A rebase is a special case of cherry-pick .","title":"Rebasing"},{"location":"guide/#cherry-pick","text":"Select commits by their hashes and apply them one-by-one onto HEAD See the VGR for visual aid.","title":"cherry-pick"},{"location":"guide/#rebase","text":"Rebase does the same as cherry-pick, only for entire branches automatically. The VGR explains the technical side of rebases pretty well. This guide -- Getting solid at Git rebase vs. merge -- explains in depth and in length the ins and outs of rebase in contrast with merge. It's very lengthy and also goes into many details that will be covered later in this guide. You should probably skip this and revisit it later.","title":"rebase"},{"location":"guide/#push-force-push-force-with-lease","text":"After you rebased a branch it contains different commits than before. Because of that git push will reject your changes. A full explanation of the problem and why --force-with-lease is a better solution than --force can be found here .","title":"push --force / push --force-with-lease"},{"location":"guide/#working-with-remotes","text":"git fetch --all git pull --all will not pull all branches push --set-upstream git branch -vva","title":"Working with remotes"},{"location":"guide/#how-to-pull-correctly","text":"Before turning to pull , let's make clear what a fast-forward merge is. Fast-forward merges A fast-forward merge is the special case where a merge can be completed without creating an extra merge commit. See the VGR or https://sandofsky.com/images/fast_forward.pdf pull vs pull --rebase vs pull --ff-only What's the difference between pull and pull --rebase ? (spoiler: pull --rebase > pull ): When should I use git pull --rebase ? And another article discouraging pull : https://adamcod.es/2014/12/10/git-pull-correct-workflow.html pull is actually considered harmful! The preferred way to get remote changes is: Use ull --ff-only and if it fails consciously take appropriate actions with merge, rebase, cherry-pick, whatever. Read the answers to this SO question","title":"How to pull correctly"},{"location":"guide/#workflow","text":"In order to have a broad understanding of Git let's have a look at a couple of popular usage paradigms A very basic introductory article on how to use branches in Git: https://sandofsky.com/blog/git-workflow.html The Git flow . A very popular branching model for git. Maximum historical innformation An overview of Git workflows Distributed Git Workflows Example of a centralized workflow: Gitlab's Merge Request workflow Example of a Integration-Manager Workflow: Fork and Pull Request Workflow (GitHub's Pull Request workflow) Example of a Dictator and Lieutenants Workflow: The Linux kernel's patch-based workflow","title":"Workflow"},{"location":"guide/#on-the-importance-of-worrying-about-your-commit-history","text":"\"Keep a clean Git history\" they say How (and why!) to keep your Git commit history clean git rebase -i - Git Interactive Rebase, Squash, Amend and Other Ways of Rewriting History Undoing things in Git reset / commit --amend https://hackernoon.com/when-to-use-git-reset-git-revert-git-checkout-dc4824795d9 https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting squash / commit --fixup / rebase --auto-squash https://robots.thoughtbot.com/autosquashing-git-commits","title":"On the importance of worrying about your commit history"},{"location":"rest/","text":"Mastering Git HEAD~1 git add --patch rebase with -p and -r checkout -m Git Internals by Scott Chacon (how git works internally) diff word-diff dir-diff blame and git log --follow -- filename https://stackoverflow.com/questions/3701404/list-all-commits-for-a-specific-file Configuration git log https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs/35075021 Aliases How to keep git log and less output on the screen Tools difftool, mergetool https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/ tig https://www.atlassian.com/blog/git/git-tig lazygit https://github.com/jesseduffield/lazygit reflog bisect rerere https://stackoverflow.com/questions/4044368/what-does-tree-ish-mean-in-git","title":"Mastering Git"},{"location":"rest/#mastering-git","text":"HEAD~1 git add --patch rebase with -p and -r checkout -m Git Internals by Scott Chacon (how git works internally) diff word-diff dir-diff blame and git log --follow -- filename https://stackoverflow.com/questions/3701404/list-all-commits-for-a-specific-file Configuration git log https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs/35075021 Aliases How to keep git log and less output on the screen Tools difftool, mergetool https://developer.atlassian.com/blog/2015/12/tips-tools-to-solve-git-conflicts/ tig https://www.atlassian.com/blog/git/git-tig lazygit https://github.com/jesseduffield/lazygit reflog bisect rerere https://stackoverflow.com/questions/4044368/what-does-tree-ish-mean-in-git","title":"Mastering Git"}]}